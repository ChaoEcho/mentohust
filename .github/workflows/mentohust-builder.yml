# 工作流名称
name: Build MentoHUST for x86_64 Snapshot

# 1. 工作流触发器
# 设置为 "workflow_dispatch"，允许您从 GitHub 仓库的 "Actions" 标签页手动触发此构建流程。
on:
  workflow_dispatch:

jobs:
  build:
    # 任务名称
    name: Build for x86_64
    # 使用最新的 Ubuntu 环境进行构建
    runs-on: ubuntu-latest

    steps:
      # 步骤1：签出您的仓库代码
      # 这一步会把您上传的 MentoHUST 源代码下载到构建环境中。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：为 OpenWrt 构建准备正确的包结构 (已修复)
      # 您的仓库结构包含 'src' 目录中的源代码，但缺少 OpenWrt 打包所需的 Makefile。
      # 我们将动态地创建正确的结构以修复编译错误。
      - name: Prepare OpenWrt package structure
        run: |
          # 1. 将 'src' 目录重命名为 'mentohust'，这是 Action 所期望的包名目录。
          mv src mentohust
          # 2. 在 'mentohust' 目录中创建符合 OpenWrt 规范的 Makefile。
          #    这个 Makefile 告诉构建系统如何编译本地源代码。
          cat <<'EOF' > mentohust/Makefile
          include $(TOPDIR)/rules.mk
          PKG_NAME:=mentohust
          PKG_VERSION:=0.3.1-6
          PKG_RELEASE:=1
          PKG_MAINTAINER:=hyt ubuntu <hytubuntu@gmail.com>
          PKG_LICENSE:=GPL-2.0-only
          PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)
          include $(INCLUDE_DIR)/package.mk
          define Package/mentohust
              SECTION:=net
              CATEGORY:=Network
              TITLE:=A client for SYSU Ruijie (V3/V4)
              URL:=https://gitee.com/kumatea/MentoHUST-SYSU-OpenWrt
              DEPENDS:=+libpcap
          endef
          define Package/mentohust/description
              A client for SYSU Ruijie (V3/V4) authentication.
              This version is specially adapted for SYSU.
          endef
          define Build/Prepare
              mkdir -p $(PKG_BUILD_DIR)
              cp -r ./src/* $(PKG_BUILD_DIR)/
          endef
          define Build/Compile
              $(MAKE) -C $(PKG_BUILD_DIR) \
                  CC="$(TARGET_CC)" \
                  CFLAGS="$(TARGET_CFLAGS) -I$(STAGING_DIR)/usr/include" \
                  LDFLAGS="$(TARGET_LDFLAGS) -L$(STAGING_DIR)/usr/lib"
          endef
          define Package/mentohust/install
              $(INSTALL_DIR) $(1)/usr/bin
              $(INSTALL_BIN) $(PKG_BUILD_DIR)/mentohust $(1)/usr/bin/
              $(INSTALL_DIR) $(1)/etc/
              $(INSTALL_CONF) $(PKG_BUILD_DIR)/mentohust.conf $(1)/etc/
          endef
          $(eval $(call BuildPackage,mentohust))
          EOF

      # 步骤3：使用 OpenWrt 官方 SDK Action 编译软件包
      # 这是核心步骤，它会自动处理 SDK 下载、链接源码和编译。
      - name: Build MentoHUST package
        uses: openwrt/gh-action-sdk@main
        env:
          # 这是最关键的设置，已为您配置好：
          # 'x86_64' 是您的目标CPU架构。
          # 'snapshot' 是版本号，因为您的 OpenWrt 24.10.x 是一个非常新的开发快照版。
          ARCH: x86_64-snapshot
          
          # 告诉 Action 去编译您仓库中哪个目录下的软件包。
          # 这里假设您的软件包源代码位于一个名为 'mentohust' 的文件夹中。
          PACKAGES: mentohust
          
          # 自定义 feed 的名称，这是一个标准的默认值。
          FEEDNAME: packages_ci

      # 步骤4：将编译好的 .ipk 文件打包为构建产物
      # 这会让您可以在 Actions 运行结束后，轻松地下载到最终的安装包。
      - name: Upload IPK artifact
        uses: actions/upload-artifact@v4
        with:
          # 设置下载下来的 zip 压缩包的名字
          name: mentohust-ipk-x86_64
          # 需要上传的文件的路径，通配符会自动匹配编译好的 .ipk 文件
          path: bin/packages/x86_64/packages_ci/*.ipk

